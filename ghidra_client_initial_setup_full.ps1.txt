﻿$Folder = 'C:\ghidra_10.3.2_PUBLIC'
$Ghidra_Repo = 'C:\ghidra-master'
$GhidraFirewall = "GhidraServer"
$Gradle = 'C:\gradle-7.3.3\bin\gradle.bat'
$Eclipse = 'C:\eclipse\eclipse.exe'
$VSBuildTools = 'C:\vs_BuildTools.exe'
$Java_Path = 'C:\Program Files\Microsoft\jdk-17.0.8.7-hotspot\bin'


Function Install-Java {
    Write-Host "Downloading and installing Java"
    Invoke-WebRequest -URI "https://aka.ms/download-jdk/microsoft-jdk-17.0.8-windows-x64.msi" -OutFile "C:\openjdk17.msi"
    C:\openjdk17.msi
    Read-Host "Press ENTER to continue..."
    $java = $env:Path -split ';' -contains $Java_Path
    if (! $java) {
        Write-Host "Updating Windows Path to include java..."
        $arrPath = $env:Path -split ';'
        $env:Path = ($arrPath + $java) -join ';'
    }
}


Function Get-JavaInstall {
    if (Test-Path $Java_Path) {
        $java = $env:Path -split ';' -contains $Java_Path
        if (! $java) {
            Write-Host "Updating Windows Path to include java..."
            $arrPath = $env:Path -split ';'
            $env:Path = ($arrPath + $java) -join ';'
        }
        return $true
    } else {
        Install-Java
        if (Test-Path $Java_Path) { 
            return $true
        }
        return $false
    }
}


Function Install-Ghidra {
    #Download the ghidra release 10.3.2
    curl "https://github.com/NationalSecurityAgency/ghidra/releases/download/Ghidra_10.3.2_build/ghidra_10.3.2_PUBLIC_20230711.zip" -OutFile "C:\ghidra_10.3.2.zip"


    #Unzip the ghidra file
    Expand-Archive -Path ghidra_10.3.2.zip -DestinationPath C:\


    #Remove zip file
    rm C:\ghidra_10.3.2.zip
}


Function Install-GhidraRepo {
    Write-Host "Downloading the Ghidra git rep..."
    curl "https://github.com/NationalSecurityAgency/ghidra/archive/refs/heads/master.zip" -OutFile "C:\ghidra_master.zip"


    Write-Host "Unzipping the Ghidra repo file..."
    Expand-Archive -Path ghidra_master.zip -DestinationPath C:\


    Write-Host "Removing Ghidra repo zip file..."
    rm C:\ghidra_master.zip
}


Function Test-GradlePath {
    $gradle_path = $env:Path -split ';' -contains 'C:\gradle-7.3.3\bin\'
    if (! $gradle_path) {
        Write-Host "Updating Windows Path to include gradle..."
        $addPath = 'C:\gradle-7.3.3\bin'
        $arrPath = $env:Path -split ';'
        $env:Path = ($arrPath + $addPath) -join ';'
    }
}


cd C:\


Write-Host "Checking Java installation..."
if (Get-JavaInstall) {
    $java_version = Get-Command java | Select-Object Version
    Write-Host "Java installed: " $java_version
} else {
    Write-Host "Java not installed and issue installing it. Please download and install from https://aka.ms/download-jdk/microsoft-jdk-17.0.8-windows-x64.msi then press ENTER to continue."
    Read-Host "Press ENTER to continue..."
}


$out = "Opening Microsoft Edge to download the below (frustratingly unable to find direct links to cut this interaction out):"
$urls = '--new-window '
if (!(Test-Path $Gradle)) {
    $test = $env:USERPROFILE\Downloads\gradle-7.3.3-all.zip
    if (!(Test-Path $test)) {
        $out = $out + "`nDownload Gradle 7.3.3"
        $urls = ' https://gradle.org/releases/'
    }
} else {
    Test-GradlePath
}
if (!(Test-Path $Eclipse)) {
    $test = $env:USERPATH\Downloads\eclipse-committers-2023-06-R-win32-x86_64.zip
    if (!(Test-Path $test)) {
        $out = $out + "`nDownload the Eclipse IDE for Eclipse Committers then close the browser.`nScript will pause and wait for ENTER to be hit."
        $urls = $urls + ' https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2023-06/R/eclipse-committers-2023-06-R-win32-x86_64.zip'
    }
}
if (!(Test-Path $VSBuildTools)) {
    $test = $env:USERPATH\Downloads\vs_buildtools.exe
    if (!(Test-Path $test)) {
        $urls = $urls + ' https://aka.ms/vs/17/release/vs_buildtools.exe'
    }
}


if ( $url.Equals('--new-window ') -and (!(Test-Path 'C:\vs_buildtools.exe'))) {
    Write-Host $out " then press ENTER to continue..."
    Start-Process -FilePath msedge -ArgumentList $urls
    Read-Host "Press ENTER to continue..."
    if (Test-Path $VSBuildTools) {
        if (!(Test-Path 'C:\vs_buildtools.exe')) {
            mv $VSBuildTools C:\
        }
    }
}


if (!(Test-Path $Gradle) -and (Test-Path $env:USERPROFILE\Downloads\gradle-7.3.3-all.zip)) {
    Write-Host "Unzipping Gradle to C:\"
    Expand-Archive -Path $env:USERPROFILE\Downloads\gradle-7.3.3-all.zip -DestinationPath C:\
    Write-Host "Unzipping Eclipse to C:\"
    Expand-Archive -Path $env:USERPROFILE\Downloads\eclipse-committers-2023-06-R-win32-x86_64.zip -DestinationPath C:\
    Test-GradlePath
}


if (Test-Path $VSBuildTools) {
    Write-Host "Launching Microsoft Build Tools installer."
    Write-Host "Options on the right in the dialog should already be checked: `“MSVC v143 - VS 2022 C++ x64/x86 build tools (Latest)`”, `"Windows 11 SDK (10.0.22621.0)`" and `"C++ ATL for latest v143 build tools (x86 & x64)`'. Press ENTER to continue after installing."
    $env:USERPROFILE\Downloads\vs_buildtools.exe --add Microsoft.VisualStudio.Component.Windows11SDK.22621 --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.VC.ATL
    Read-Host "Press ENTER to continue..."
}


Write-Host "Testing if GhidraServer firewall rule exists..."
$FirewallExist = Get-NetFirewallRule -DisplayName $GhidraFirewall
if ($FirewallExist) {
    Write-Host "GhidraServer firewall rule exists."
} else {
    Write-Host "GhidraServer firewall rule does NOT exist, creating..."
    New-NetFirewallRule -DisplayName $GhidraFirewall -Description "Allow inbound traffic to Ghidra Server Ports 13100-13120" -Direction Inbound -LocalPort 13100-13200 -Protocol TCP -Action Allow
}


Write-Host "Checking if Ghidra_10.3.2_PUBLIC is already installed..."
if (Test-Path $Folder) {
    Write-Host $Folder " exists, testing if empty..."
    if ((Get-ChildItem -Path $Folder -Force | Measure-Object).Count -eq 0) {
        Write-Host $Folder " is empty, pulling Ghidra and installing."
        Install-Ghidra
        C:\ghidra_10.3.2_PUBLIC\ghidraRun.bat
        Read-Host "Press ENTER to continue..."
    } else {
        Write-Host "Ghidra 10.3.2 is installed."
    }
} else {
    Write-Host "Installing Ghidra_10.3.2._PUBLIC..."
    Install-Ghidra
    C:\ghidra_10.3.2_PUBLIC\ghidraRun.bat
    Read-Host "Press ENTER to continue..."
}


Write-Host "Checking if Ghidra git repo is already installed..."
if (Test-Path -Path $Ghidra_Repo) {
    Write-Host $Ghidra_Repo " exists, testing if empty..."
    if ((Get-ChildItem -Path $Ghidra_Repo -Force | Measure-Object).Count -eq 0) {
        Write-Host $Folder " is empty, pulling Ghidra and installing..."
        Install-GhidraRepo
    } else {
        Write-Host "Ghidra is installed."
    }
} else {
    Write-Host "Pulling and installing the Ghidra repo..."
    Install-GhidraRepo
}


Write-Host "Checking if Python is installed. If Windows Store launches click the `"Get`" button and walk through installation then hit ENTER to continue..."
python3
Read-Host "Press ENTER to continue..."


Write-Host "Attempt to add CDT, PyDev and GhidraDev to Eclipse install..."
C:\eclipse\eclipsec.exe -application org.eclipse.equinox.p2.director -repository https://download.eclipse.org/releases/helios/ -installIU org.eclipse.cdt.feature.group -tag AddCDT -destination C:\eclipse -profile SDKProfile
#Still need to figure out how to install PyDev and the GhidraDev 
Expand-Archive -Path C:\ghidra_10.3.2_PUBLIC\Extensions\Eclipse\GhidraDev\GhidraDev-3.0.0.zip -DestinationPath C:\eclipse
Expand-Archive -Path 'C:\ghidra-master\dependencies\GhidraDev\PyDev 6.3.1.zip' -DestinationPath C:\eclipse
Write-Host "Check Eclipse for installed software Help->About Eclipse->Installation Details->Installed Software."
Write-Host "Look for CDT and PyDev."
Write-Host "For GhidraDev, GhidraDev menu option should be on the main Eclipse panel."
Write-Host "If one or none of the above show. CDT & PyDev can be installed via Help->Eclipse Marketplace, search and install."
Write-Host "GhidraDev can be installed by clicking Help->Install New Software->Add->Archive, navigate to and select:"
Write-Host "C:\ghidra_10.3.2_PUBLIC\Extensions\Eclipse\GhidraDev\GhidraDev-3.0.0.zip"




cd C:\ghidra-master
Write-Host ""
Write-Host "Fetching Ghidra build dependencies..."
gradle -I gradle/support/fetchDependencies.gradle init
Write-Host ""
Write-Host "Testing Ghidra build..."
gradle buildGhidra
Write-Host ""
Write-Host "Prepping Eclipse Ghidra build environment to enable plugin development..."
gradle cleanEclipse eclipse
gradle prepdev eclipse buildNatives
gradle eclipse -PeclipsePDE
Write-Host ""
Write-Host "Rebuilding Ghidra post-Eclipse prep..."
gradle buildGhidra


#Download and install x64Dbg
Write-Host "Downloading and installing x64Debug. Step through the process."
curl "https://github.com/x64dbg/x64dbg/releases/download/snapshot/snapshot_2023-08-01_14-50.zip" -Outfile $env:USERPROFILE\Downloads\x64Dbg.zip
Expand-Archive -Path x64Dbg.zip -DestinationPath C:\x64Dbg
C:\x64Dbg\release\x96dbg.exe
